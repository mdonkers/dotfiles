[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=format:'%C(yellow)%h %C(blue)%<(20,trunc)%cN %C(reset)%s' -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
  s = status -s

		# View local branches in verbose format
  b = branch -vv

	# Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
  p = !"git pull --prune; git submodule foreach git fetch origin; git submodule update --init --recursive"

	# Clone a repository including all submodules
  c = clone --recursive

	# Commit all changes
  ca = !git add -A && git commit -av

	# Switch to a (remote) branch, creating it if necessary
  go = "!f() { git checkout \"$1\" 2> /dev/null || git checkout -b \"$1\"; }; f"

	# Color graph log view
  graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

		# See different commits between two branches, needs two branch names as parameters like <branch-a>...<branch-b>
  branchdiff = log --left-right --graph --cherry-mark --pretty=format:'%C(yellow)%h %C(blue)%<(20,trunc)%cN %C(reset)%s' --abbrev-commit

	# Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

	# Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

		# Show all unpushed commits in short format
  unpushed = log --branches --not --remotes --simplify-by-decoration --decorate --oneline

	# Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
  fb = "!f() { git branch -a --contains \"$1\"; }; f"

	# Find tags containing commit
  ft = "!f() { git describe --always --contains \"$1\"; }; f"

	# Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S\"$1\"; }; f"

	# Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -i --grep=\"$1\"; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Remove squashed / rebased branches, merged with the 'current' active branch
	# Need to explicitly spawn a Bash shell because of the [[ ]] which only exist in Bash (not sh)
	# a.k.a. 'delete squashed'
  ds = "!bash -c 'git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $(git rev-parse --abbrev-ref HEAD) $branch) && [[ $(git cherry $(git rev-parse --abbrev-ref HEAD) $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == \"-\"* ]] && git branch -D $branch; done;' --"

		# List remote branches with their latest commit timestamp and author (to find outdated branches)
  stale = "!f() { for branch in $(git branch -r | grep -v HEAD); do echo \"$(git show --format=\"%ci %cr %an\" $branch | head -n 1) \t$branch\"; done | sort -r; }; f"

	# List contributors with number of commits
  contributors = shortlog --summary --numbered
  lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit
  mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"

[advice]

  statusHints = false

[apply]

	# Detect whitespace errors when applying a patch
  whitespace = fix

[branch]

  autosetupmerge = true

[core]

	# Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false
  editor = vim

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[commit]
  gpgsign = true

[diff]

	# Detect copies as well as renames
  renames = copies
  mnemonicprefix = true
		#compactionHeuristic = true
  indentHeuristic = true
  # Show 'normal' filenames without the a/ b/ prefixes
  noprefix = true

[help]

	# Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
  log = true
  stat = true
  tool = vimdiff
  conflictStyle = diff3

[push]

  default = simple

[pull]

  rebase = true

# URL shorthands
[url "git@github.com:instana"]

  insteadOf = "https://github.com/instana"
  insteadOf = "github:instana"
  insteadOf = "git://github.com/instana"

[url "git@github.com:"]

  pushInsteadOf = "https://github.com/"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[user]

  name = Miel Donkers
  email = miel.donkers@instana.com
  signingkey = 24046A96

[github]

  user = mdonkers

[http]

  cookiefile = ~/.gitcookies

[filter "lfs"]

  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[mergetool]

  prompt = false
