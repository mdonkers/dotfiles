#!/bin/bash
set -euo pipefail

help() {
	echo "htotheizzo - a simple script that makes updating/upgrading homebrew or apt, gems, pip packages, and node packages so much easier"
}

# Choose a user account to use
get_user() {
  if [ -z "${TARGET_USER-}" ]; then
    mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
    # if there is only one option just use that user
    if [ "${#options[@]}" -eq "1" ]; then
      readonly TARGET_USER="${options[0]}"
      echo "Using user account: ${TARGET_USER}"
      return
    fi

    # iterate through the user options and print them
    PS3='Which user account should be used? '

    select opt in "${options[@]}"; do
      readonly TARGET_USER=$opt
      break
    done
  fi
}

dcleanup(){
  local containers
  mapfile -t containers < <(docker ps --filter status=exited -q 2>/dev/null)
  docker rm "${containers[@]}" 2>/dev/null
  local images
  mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
  docker rmi "${images[@]}" 2>/dev/null
}

update_docker() {
	local user_home="/home/${TARGET_USER}"

	# Run some regular cleanup, just in case
	dcleanup || true

	# Include contributed completions
	mkdir -p /etc/bash_completion.d
	curl -sSL -o /etc/bash_completion.d/docker https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker
	curl -sSL -o /etc/bash_completion.d/docker-compose https://raw.githubusercontent.com/docker/compose/master/contrib/completion/bash/docker-compose

	# Get the Docker Compose files
	local docker_compose_release
	docker_compose_release=$(curl -L -s -H 'Accept: application/json' https://github.com/docker/compose/releases/latest)
	local docker_compose_version
	# shellcheck disable=SC2001
	docker_compose_version=$(echo "${docker_compose_release}" | sed -e 's/.*"tag_name":"\(v[0-9\.]*\)".*/\1/')
	local docker_compose_binary_uri
	docker_compose_binary_uri="https://github.com/docker/compose/releases/download/${docker_compose_version}/docker-compose-Linux-x86_64"
	(
	set -x
	curl -fSL "${docker_compose_binary_uri}" -o "/usr/local/bin/docker-compose"
	)

	chmod +x /usr/local/bin/docker*

	# Get Docker buildx plugin
	local docker_buildx_release
	docker_buildx_release=$(curl -L -s -H 'Accept: application/json' https://github.com/docker/buildx/releases/latest)
	local docker_buildx_version
	# shellcheck disable=SC2001
	docker_buildx_version=$(echo "${docker_buildx_release}" | sed -e 's/.*"tag_name":"\(v[0-9\.]*\)".*/\1/')
	local docker_buildx_binary_uri
	docker_buildx_binary_uri="https://github.com/docker/buildx/releases/download/${docker_buildx_version}/buildx-${docker_buildx_version}.linux-amd64"
	mkdir -p "${user_home}/.docker/cli-plugins"
	(
	set -x
	curl -fSL "${docker_buildx_binary_uri}" -o "${user_home}/.docker/cli-plugins/docker-buildx"
	)

	chmod a+x "${user_home}/.docker/cli-plugins/docker-buildx"
	chown -R "${TARGET_USER}":"${TARGET_USER}" "${user_home}/.docker"

}

update_linux() {
	apt -y update
	# List all upgradable packages, just for convenience so we know what will be updated.
	apt list --upgradable
	apt -y upgrade
	apt -y install -t unstable firefox --no-install-recommends
	apt -y autoremove
	apt -y autoclean
	apt -y clean
	rm -rf /var/lib/apt/lists/*

	# Make sure Neovim and other packages are installed and up-to-date
	PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin pipx upgrade-all
}

update_kubectl() {
  KUBERNETES_VERSION=$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)
  curl -fSL "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" > /Development/tools/kubectl
  chown -R "${TARGET_USER}:${TARGET_USER}" "/Development/tools/kubectl"
  chmod +x /Development/tools/kubectl
  ln -snf /Development/tools/kubectl /usr/local/bin/kubectl
  echo "kubectl $(kubectl version --client)"
}

update_firmware() {
  echo
  echo "Updating firmware..."
  echo
  update-firmware
}

update_bios() {
  echo
  echo "Checking for BIOS updates..."
  echo
  fwupdmgr refresh --force
  fwupdmgr get-updates && fwupdmgr update || true
}

update() {
	echo "htotheizzo is running the update functions"

	# detect the OS for the update functions
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		echo "Hey there Linux user. You rule."

		# on linux, make sure they are the super user
		if [ "$UID" -ne 0 ]; then
			echo "Please run as root"
			exit 1
		fi

		# update
		get_user;
		update_linux;
		update_docker;
		update_kubectl;
		update_firmware;
		update_bios;
	else
		echo "We don't have update functions for OS: ${OSTYPE}"
		echo "Moving on..."
	fi

	echo "htotheizzo is complete, you got 99 problems but updates ain't one"
}

main() {
	if [[ $# -gt 0 ]]; then
		help
	else
		update
	fi
}

main "$@"
